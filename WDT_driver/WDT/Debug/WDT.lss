
WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000330  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000354  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <WDT_Enable>:
#include "WDT_private.h"
#include "WDT_interface.h"


void WDT_Enable()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR, WDTCR_WDE);
  74:	a1 e4       	ldi	r26, 0x41	; 65
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e1 e4       	ldi	r30, 0x41	; 65
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	8c 93       	st	X, r24

}
  82:	cf 91       	pop	r28
  84:	df 91       	pop	r29
  86:	08 95       	ret

00000088 <WDT_disable>:
void WDT_disable()
{
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	//1- write a logic one to WDTOE and WDE
	WDTCR |= (1 << 4); //0b00011000
  90:	a1 e4       	ldi	r26, 0x41	; 65
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e1 e4       	ldi	r30, 0x41	; 65
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	8c 93       	st	X, r24
	WDTCR |= (1 << 3);
  9e:	a1 e4       	ldi	r26, 0x41	; 65
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e1 e4       	ldi	r30, 0x41	; 65
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	8c 93       	st	X, r24
	//2-Within the next four clock cycles, write a logic 0 to WDE
	WDTCR = 0;
  ac:	e1 e4       	ldi	r30, 0x41	; 65
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1

}
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	08 95       	ret

000000b8 <WDT_SLEEP>:

void WDT_SLEEP( u8 Copyu8Timeout)
{
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(WDTCR, WDTCR_WDP2);
	CLR_BIT(WDTCR, WDTCR_WDP1);
	SET_BIT(WDTCR, WDTCR_WDP0);

#elif WATCHDOG_TIMER_PRESCALE_SELECTION == TIMEOUT_1024_K
	SET_BIT(WDTCR, WDTCR_WDP2);
  c4:	a1 e4       	ldi	r26, 0x41	; 65
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e1 e4       	ldi	r30, 0x41	; 65
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	8c 93       	st	X, r24
	SET_BIT(WDTCR, WDTCR_WDP1);
  d2:	a1 e4       	ldi	r26, 0x41	; 65
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e1 e4       	ldi	r30, 0x41	; 65
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	8c 93       	st	X, r24
	CLR_BIT(WDTCR, WDTCR_WDP0);
  e0:	a1 e4       	ldi	r26, 0x41	; 65
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e1 e4       	ldi	r30, 0x41	; 65
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	8c 93       	st	X, r24
	SET_BIT(WDTCR, WDTCR_WDP2);
	SET_BIT(WDTCR, WDTCR_WDP1);
	SET_BIT(WDTCR, WDTCR_WDP0);

#endif
}
  ee:	0f 90       	pop	r0
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <main>:
 *      Author: noor elswefy
 */


void main()
{
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	ff cf       	rjmp	.-2      	; 0xfe <main+0x8>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
