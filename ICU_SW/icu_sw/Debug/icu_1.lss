
icu_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002342  000023d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800080  00800080  000023f6  2**0
                  ALLOC
  3 .stab         00001e90  00000000  00000000  000023f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e99  00000000  00000000  00004288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000053d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000701a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000986f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 09 	call	0x127e	; 0x127e <main>
      8a:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPortDirection>:

/**/

void DIO_voidSetPortDirection(u8 copy_u8portID,u8 copy_u8PortDir )

{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_voidSetPortDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_voidSetPortDirection+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8portID)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	3c 83       	std	Y+4, r19	; 0x04
     b5e:	2b 83       	std	Y+3, r18	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	d1 f0       	breq	.+52     	; 0xb9e <DIO_voidSetPortDirection+0x58>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <DIO_voidSetPortDirection+0x38>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <DIO_voidSetPortDirection+0x4e>
     b7c:	1e c0       	rjmp	.+60     	; 0xbba <DIO_voidSetPortDirection+0x74>
     b7e:	2b 81       	ldd	r18, Y+3	; 0x03
     b80:	3c 81       	ldd	r19, Y+4	; 0x04
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	81 f0       	breq	.+32     	; 0xba8 <DIO_voidSetPortDirection+0x62>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	91 05       	cpc	r25, r1
     b90:	81 f0       	breq	.+32     	; 0xbb2 <DIO_voidSetPortDirection+0x6c>
     b92:	13 c0       	rjmp	.+38     	; 0xbba <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= copy_u8PortDir ; break ;
     b94:	ea e3       	ldi	r30, 0x3A	; 58
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	80 83       	st	Z, r24
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= copy_u8PortDir ; break ;
     b9e:	e7 e3       	ldi	r30, 0x37	; 55
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	80 83       	st	Z, r24
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= copy_u8PortDir ; break ;
     ba8:	e4 e3       	ldi	r30, 0x34	; 52
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	80 83       	st	Z, r24
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= copy_u8PortDir ; break ;
     bb2:	e1 e3       	ldi	r30, 0x31	; 49
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	80 83       	st	Z, r24

	}
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 copy_u8PortID,u8 copy_u8PortVal )

{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <DIO_voidSetPortValue+0x6>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <DIO_voidSetPortValue+0x8>
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8PortID)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	3c 83       	std	Y+4, r19	; 0x04
     be0:	2b 83       	std	Y+3, r18	; 0x03
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	91 05       	cpc	r25, r1
     bea:	d1 f0       	breq	.+52     	; 0xc20 <DIO_voidSetPortValue+0x58>
     bec:	2b 81       	ldd	r18, Y+3	; 0x03
     bee:	3c 81       	ldd	r19, Y+4	; 0x04
     bf0:	22 30       	cpi	r18, 0x02	; 2
     bf2:	31 05       	cpc	r19, r1
     bf4:	2c f4       	brge	.+10     	; 0xc00 <DIO_voidSetPortValue+0x38>
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	61 f0       	breq	.+24     	; 0xc16 <DIO_voidSetPortValue+0x4e>
     bfe:	1e c0       	rjmp	.+60     	; 0xc3c <DIO_voidSetPortValue+0x74>
     c00:	2b 81       	ldd	r18, Y+3	; 0x03
     c02:	3c 81       	ldd	r19, Y+4	; 0x04
     c04:	22 30       	cpi	r18, 0x02	; 2
     c06:	31 05       	cpc	r19, r1
     c08:	81 f0       	breq	.+32     	; 0xc2a <DIO_voidSetPortValue+0x62>
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	9c 81       	ldd	r25, Y+4	; 0x04
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	91 05       	cpc	r25, r1
     c12:	81 f0       	breq	.+32     	; 0xc34 <DIO_voidSetPortValue+0x6c>
     c14:	13 c0       	rjmp	.+38     	; 0xc3c <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= copy_u8PortVal ; break ;
     c16:	eb e3       	ldi	r30, 0x3B	; 59
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	80 83       	st	Z, r24
     c1e:	0e c0       	rjmp	.+28     	; 0xc3c <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTD_REG= copy_u8PortVal ; break ;
     c20:	e2 e3       	ldi	r30, 0x32	; 50
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	80 83       	st	Z, r24
     c28:	09 c0       	rjmp	.+18     	; 0xc3c <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= copy_u8PortVal ; break ;
     c2a:	e5 e3       	ldi	r30, 0x35	; 53
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	80 83       	st	Z, r24
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= copy_u8PortVal ; break ;
     c34:	e2 e3       	ldi	r30, 0x32	; 50
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	80 83       	st	Z, r24

	}
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	27 97       	sbiw	r28, 0x07	; 7
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	6a 83       	std	Y+2, r22	; 0x02
     c62:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	88 30       	cpi	r24, 0x08	; 8
     c68:	08 f0       	brcs	.+2      	; 0xc6c <DIO_voidSetPinDirection+0x22>
     c6a:	ea c0       	rjmp	.+468    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	09 f0       	breq	.+2      	; 0xc74 <DIO_voidSetPinDirection+0x2a>
     c72:	6f c0       	rjmp	.+222    	; 0xd52 <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	3f 83       	std	Y+7, r19	; 0x07
     c7c:	2e 83       	std	Y+6, r18	; 0x06
     c7e:	8e 81       	ldd	r24, Y+6	; 0x06
     c80:	9f 81       	ldd	r25, Y+7	; 0x07
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	91 05       	cpc	r25, r1
     c86:	49 f1       	breq	.+82     	; 0xcda <DIO_voidSetPinDirection+0x90>
     c88:	2e 81       	ldd	r18, Y+6	; 0x06
     c8a:	3f 81       	ldd	r19, Y+7	; 0x07
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	2c f4       	brge	.+10     	; 0xc9c <DIO_voidSetPinDirection+0x52>
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	61 f0       	breq	.+24     	; 0xcb2 <DIO_voidSetPinDirection+0x68>
     c9a:	d2 c0       	rjmp	.+420    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
     c9c:	2e 81       	ldd	r18, Y+6	; 0x06
     c9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ca0:	22 30       	cpi	r18, 0x02	; 2
     ca2:	31 05       	cpc	r19, r1
     ca4:	71 f1       	breq	.+92     	; 0xd02 <DIO_voidSetPinDirection+0xb8>
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	91 05       	cpc	r25, r1
     cae:	e9 f1       	breq	.+122    	; 0xd2a <DIO_voidSetPinDirection+0xe0>
     cb0:	c7 c0       	rjmp	.+398    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
     cb2:	aa e3       	ldi	r26, 0x3A	; 58
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ea e3       	ldi	r30, 0x3A	; 58
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_voidSetPinDirection+0x86>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_voidSetPinDirection+0x82>
     cd4:	84 2b       	or	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	b3 c0       	rjmp	.+358    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
     cda:	a7 e3       	ldi	r26, 0x37	; 55
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e7 e3       	ldi	r30, 0x37	; 55
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_voidSetPinDirection+0xae>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_voidSetPinDirection+0xaa>
     cfc:	84 2b       	or	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	9f c0       	rjmp	.+318    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
     d02:	a4 e3       	ldi	r26, 0x34	; 52
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e4 e3       	ldi	r30, 0x34	; 52
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_voidSetPinDirection+0xd6>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_voidSetPinDirection+0xd2>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	8b c0       	rjmp	.+278    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
     d2a:	a1 e3       	ldi	r26, 0x31	; 49
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e1 e3       	ldi	r30, 0x31	; 49
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_voidSetPinDirection+0xfe>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_voidSetPinDirection+0xfa>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	77 c0       	rjmp	.+238    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	88 23       	and	r24, r24
     d56:	09 f0       	breq	.+2      	; 0xd5a <DIO_voidSetPinDirection+0x110>
     d58:	73 c0       	rjmp	.+230    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3d 83       	std	Y+5, r19	; 0x05
     d62:	2c 83       	std	Y+4, r18	; 0x04
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	9d 81       	ldd	r25, Y+5	; 0x05
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	91 05       	cpc	r25, r1
     d6c:	59 f1       	breq	.+86     	; 0xdc4 <DIO_voidSetPinDirection+0x17a>
     d6e:	2c 81       	ldd	r18, Y+4	; 0x04
     d70:	3d 81       	ldd	r19, Y+5	; 0x05
     d72:	22 30       	cpi	r18, 0x02	; 2
     d74:	31 05       	cpc	r19, r1
     d76:	2c f4       	brge	.+10     	; 0xd82 <DIO_voidSetPinDirection+0x138>
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	69 f0       	breq	.+26     	; 0xd9a <DIO_voidSetPinDirection+0x150>
     d80:	5f c0       	rjmp	.+190    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	89 f1       	breq	.+98     	; 0xdee <DIO_voidSetPinDirection+0x1a4>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	83 30       	cpi	r24, 0x03	; 3
     d92:	91 05       	cpc	r25, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <DIO_voidSetPinDirection+0x14e>
     d96:	40 c0       	rjmp	.+128    	; 0xe18 <DIO_voidSetPinDirection+0x1ce>
     d98:	53 c0       	rjmp	.+166    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
     d9a:	aa e3       	ldi	r26, 0x3A	; 58
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e3       	ldi	r30, 0x3A	; 58
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_voidSetPinDirection+0x16e>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_voidSetPinDirection+0x16a>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	3e c0       	rjmp	.+124    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
     dc4:	a7 e3       	ldi	r26, 0x37	; 55
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e7 e3       	ldi	r30, 0x37	; 55
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_voidSetPinDirection+0x198>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_voidSetPinDirection+0x194>
     de6:	80 95       	com	r24
     de8:	84 23       	and	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	29 c0       	rjmp	.+82     	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
     dee:	a4 e3       	ldi	r26, 0x34	; 52
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e4 e3       	ldi	r30, 0x34	; 52
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_voidSetPinDirection+0x1c2>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_voidSetPinDirection+0x1be>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	14 c0       	rjmp	.+40     	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
     e18:	a1 e3       	ldi	r26, 0x31	; 49
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e1 e3       	ldi	r30, 0x31	; 49
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_voidSetPinDirection+0x1ec>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_voidSetPinDirection+0x1e8>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <DIO_voidSetPinValue>:
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	27 97       	sbiw	r28, 0x07	; 7
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	6a 83       	std	Y+2, r22	; 0x02
     e6a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	88 30       	cpi	r24, 0x08	; 8
     e70:	08 f0       	brcs	.+2      	; 0xe74 <DIO_voidSetPinValue+0x22>
     e72:	ea c0       	rjmp	.+468    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	09 f0       	breq	.+2      	; 0xe7c <DIO_voidSetPinValue+0x2a>
     e7a:	6f c0       	rjmp	.+222    	; 0xf5a <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	3f 83       	std	Y+7, r19	; 0x07
     e84:	2e 83       	std	Y+6, r18	; 0x06
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	91 05       	cpc	r25, r1
     e8e:	49 f1       	breq	.+82     	; 0xee2 <DIO_voidSetPinValue+0x90>
     e90:	2e 81       	ldd	r18, Y+6	; 0x06
     e92:	3f 81       	ldd	r19, Y+7	; 0x07
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	2c f4       	brge	.+10     	; 0xea4 <DIO_voidSetPinValue+0x52>
     e9a:	8e 81       	ldd	r24, Y+6	; 0x06
     e9c:	9f 81       	ldd	r25, Y+7	; 0x07
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	61 f0       	breq	.+24     	; 0xeba <DIO_voidSetPinValue+0x68>
     ea2:	d2 c0       	rjmp	.+420    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
     ea4:	2e 81       	ldd	r18, Y+6	; 0x06
     ea6:	3f 81       	ldd	r19, Y+7	; 0x07
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	71 f1       	breq	.+92     	; 0xf0a <DIO_voidSetPinValue+0xb8>
     eae:	8e 81       	ldd	r24, Y+6	; 0x06
     eb0:	9f 81       	ldd	r25, Y+7	; 0x07
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	91 05       	cpc	r25, r1
     eb6:	e9 f1       	breq	.+122    	; 0xf32 <DIO_voidSetPinValue+0xe0>
     eb8:	c7 c0       	rjmp	.+398    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
     eba:	ab e3       	ldi	r26, 0x3B	; 59
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	eb e3       	ldi	r30, 0x3B	; 59
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_voidSetPinValue+0x86>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_voidSetPinValue+0x82>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	b3 c0       	rjmp	.+358    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
     ee2:	a8 e3       	ldi	r26, 0x38	; 56
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e8 e3       	ldi	r30, 0x38	; 56
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_voidSetPinValue+0xae>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_voidSetPinValue+0xaa>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	9f c0       	rjmp	.+318    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
     f0a:	a5 e3       	ldi	r26, 0x35	; 53
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e5 e3       	ldi	r30, 0x35	; 53
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_voidSetPinValue+0xd6>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_voidSetPinValue+0xd2>
     f2c:	84 2b       	or	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	8b c0       	rjmp	.+278    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
     f32:	a2 e3       	ldi	r26, 0x32	; 50
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e2 e3       	ldi	r30, 0x32	; 50
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_voidSetPinValue+0xfe>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_voidSetPinValue+0xfa>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	77 c0       	rjmp	.+238    	; 0x1048 <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 23       	and	r24, r24
     f5e:	09 f0       	breq	.+2      	; 0xf62 <DIO_voidSetPinValue+0x110>
     f60:	73 c0       	rjmp	.+230    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3d 83       	std	Y+5, r19	; 0x05
     f6a:	2c 83       	std	Y+4, r18	; 0x04
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	59 f1       	breq	.+86     	; 0xfcc <DIO_voidSetPinValue+0x17a>
     f76:	2c 81       	ldd	r18, Y+4	; 0x04
     f78:	3d 81       	ldd	r19, Y+5	; 0x05
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	2c f4       	brge	.+10     	; 0xf8a <DIO_voidSetPinValue+0x138>
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f0       	breq	.+26     	; 0xfa2 <DIO_voidSetPinValue+0x150>
     f88:	5f c0       	rjmp	.+190    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	89 f1       	breq	.+98     	; 0xff6 <DIO_voidSetPinValue+0x1a4>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_voidSetPinValue+0x14e>
     f9e:	40 c0       	rjmp	.+128    	; 0x1020 <DIO_voidSetPinValue+0x1ce>
     fa0:	53 c0       	rjmp	.+166    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
     fa2:	ab e3       	ldi	r26, 0x3B	; 59
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	eb e3       	ldi	r30, 0x3B	; 59
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_voidSetPinValue+0x16e>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_voidSetPinValue+0x16a>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	3e c0       	rjmp	.+124    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
     fcc:	a8 e3       	ldi	r26, 0x38	; 56
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e8 e3       	ldi	r30, 0x38	; 56
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_voidSetPinValue+0x198>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_voidSetPinValue+0x194>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	29 c0       	rjmp	.+82     	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
     ff6:	a5 e3       	ldi	r26, 0x35	; 53
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e3       	ldi	r30, 0x35	; 53
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidSetPinValue+0x1c2>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidSetPinValue+0x1be>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1020:	a2 e3       	ldi	r26, 0x32	; 50
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e2 e3       	ldi	r30, 0x32	; 50
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_voidSetPinValue+0x1ec>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_voidSetPinValue+0x1e8>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24

			}
		}
	}
}
    1048:	27 96       	adiw	r28, 0x07	; 7
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <DIO_voidGetBitValue>:

u8 DIO_voidGetBitValue(u8 copy_u8PortID , u8 copy_PinID )
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_voidGetBitValue+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_voidGetBitValue+0x8>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	8a 83       	std	Y+2, r24	; 0x02
    106a:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	switch(copy_u8PortID)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	3d 83       	std	Y+5, r19	; 0x05
    1074:	2c 83       	std	Y+4, r18	; 0x04
    1076:	4c 81       	ldd	r20, Y+4	; 0x04
    1078:	5d 81       	ldd	r21, Y+5	; 0x05
    107a:	41 30       	cpi	r20, 0x01	; 1
    107c:	51 05       	cpc	r21, r1
    107e:	41 f1       	breq	.+80     	; 0x10d0 <DIO_voidGetBitValue+0x76>
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
    1082:	9d 81       	ldd	r25, Y+5	; 0x05
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	91 05       	cpc	r25, r1
    1088:	34 f4       	brge	.+12     	; 0x1096 <DIO_voidGetBitValue+0x3c>
    108a:	2c 81       	ldd	r18, Y+4	; 0x04
    108c:	3d 81       	ldd	r19, Y+5	; 0x05
    108e:	21 15       	cp	r18, r1
    1090:	31 05       	cpc	r19, r1
    1092:	61 f0       	breq	.+24     	; 0x10ac <DIO_voidGetBitValue+0x52>
    1094:	52 c0       	rjmp	.+164    	; 0x113a <DIO_voidGetBitValue+0xe0>
    1096:	4c 81       	ldd	r20, Y+4	; 0x04
    1098:	5d 81       	ldd	r21, Y+5	; 0x05
    109a:	42 30       	cpi	r20, 0x02	; 2
    109c:	51 05       	cpc	r21, r1
    109e:	51 f1       	breq	.+84     	; 0x10f4 <DIO_voidGetBitValue+0x9a>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	b9 f1       	breq	.+110    	; 0x1118 <DIO_voidGetBitValue+0xbe>
    10aa:	47 c0       	rjmp	.+142    	; 0x113a <DIO_voidGetBitValue+0xe0>
	{

	case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,copy_PinID)   ; break ;
    10ac:	e9 e3       	ldi	r30, 0x39	; 57
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a9 01       	movw	r20, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_voidGetBitValue+0x6a>
    10c0:	55 95       	asr	r21
    10c2:	47 95       	ror	r20
    10c4:	8a 95       	dec	r24
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_voidGetBitValue+0x66>
    10c8:	ca 01       	movw	r24, r20
    10ca:	81 70       	andi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	35 c0       	rjmp	.+106    	; 0x113a <DIO_voidGetBitValue+0xe0>
	case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,copy_PinID)   ; break ;
    10d0:	e6 e3       	ldi	r30, 0x36	; 54
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_voidGetBitValue+0x8e>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_voidGetBitValue+0x8a>
    10ec:	ca 01       	movw	r24, r20
    10ee:	81 70       	andi	r24, 0x01	; 1
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	23 c0       	rjmp	.+70     	; 0x113a <DIO_voidGetBitValue+0xe0>

	case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,copy_PinID)   ; break ;
    10f4:	e3 e3       	ldi	r30, 0x33	; 51
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a9 01       	movw	r20, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_voidGetBitValue+0xb2>
    1108:	55 95       	asr	r21
    110a:	47 95       	ror	r20
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_voidGetBitValue+0xae>
    1110:	ca 01       	movw	r24, r20
    1112:	81 70       	andi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	11 c0       	rjmp	.+34     	; 0x113a <DIO_voidGetBitValue+0xe0>

	case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,copy_PinID)   ; break ;
    1118:	e0 e3       	ldi	r30, 0x30	; 48
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_voidGetBitValue+0xd6>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_voidGetBitValue+0xd2>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_PinVal ;
    113a:	89 81       	ldd	r24, Y+1	; 0x01

}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <DIO_voidToggelPin>:

}
 */

void DIO_voidToggelPin(u8 copy_u8PortID,u8 copy_u8PinID)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <DIO_voidToggelPin+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <DIO_voidToggelPin+0x8>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	6a 83       	std	Y+2, r22	; 0x02

	switch (copy_u8PortID)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3c 83       	std	Y+4, r19	; 0x04
    1164:	2b 83       	std	Y+3, r18	; 0x03
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	49 f1       	breq	.+82     	; 0x11c2 <DIO_voidToggelPin+0x76>
    1170:	2b 81       	ldd	r18, Y+3	; 0x03
    1172:	3c 81       	ldd	r19, Y+4	; 0x04
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	2c f4       	brge	.+10     	; 0x1184 <DIO_voidToggelPin+0x38>
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	61 f0       	breq	.+24     	; 0x119a <DIO_voidToggelPin+0x4e>
    1182:	5a c0       	rjmp	.+180    	; 0x1238 <DIO_voidToggelPin+0xec>
    1184:	2b 81       	ldd	r18, Y+3	; 0x03
    1186:	3c 81       	ldd	r19, Y+4	; 0x04
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	71 f1       	breq	.+92     	; 0x11ea <DIO_voidToggelPin+0x9e>
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	e9 f1       	breq	.+122    	; 0x1212 <DIO_voidToggelPin+0xc6>
    1198:	4f c0       	rjmp	.+158    	; 0x1238 <DIO_voidToggelPin+0xec>
	{
	case PORTA_ID :  TOG_BIT(PORTA_REG,copy_u8PinID) ; break ;
    119a:	ab e3       	ldi	r26, 0x3B	; 59
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_voidToggelPin+0x6c>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_voidToggelPin+0x68>
    11bc:	84 27       	eor	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	3b c0       	rjmp	.+118    	; 0x1238 <DIO_voidToggelPin+0xec>
	case PORTB_ID :  TOG_BIT(PORTB_REG,copy_u8PinID) ; break ;
    11c2:	a8 e3       	ldi	r26, 0x38	; 56
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e3       	ldi	r30, 0x38	; 56
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_voidToggelPin+0x94>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_voidToggelPin+0x90>
    11e4:	84 27       	eor	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	27 c0       	rjmp	.+78     	; 0x1238 <DIO_voidToggelPin+0xec>
	case PORTC_ID :  TOG_BIT(PORTC_REG,copy_u8PinID) ; break ;
    11ea:	a5 e3       	ldi	r26, 0x35	; 53
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e5 e3       	ldi	r30, 0x35	; 53
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_voidToggelPin+0xbc>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_voidToggelPin+0xb8>
    120c:	84 27       	eor	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	13 c0       	rjmp	.+38     	; 0x1238 <DIO_voidToggelPin+0xec>
	case PORTD_ID :  TOG_BIT(PORTD_REG,copy_u8PinID) ; break ;
    1212:	a2 e3       	ldi	r26, 0x32	; 50
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e2 e3       	ldi	r30, 0x32	; 50
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_voidToggelPin+0xe4>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_voidToggelPin+0xe0>
    1234:	84 27       	eor	r24, r20
    1236:	8c 93       	st	X, r24


	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <GIE_voidEanble>:
#include "GIE_private.h"



void GIE_voidEanble()
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	//GIFR INTF1 INTF0 INTF2
	SET_BIT(SREG,I_BIT);
    124e:	af e5       	ldi	r26, 0x5F	; 95
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ef e5       	ldi	r30, 0x5F	; 95
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	8c 93       	st	X, r24
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <GIE_voidDisable>:
void GIE_voidDisable()
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I_BIT);
    126a:	af e5       	ldi	r26, 0x5F	; 95
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ef e5       	ldi	r30, 0x5F	; 95
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8f 77       	andi	r24, 0x7F	; 127
    1276:	8c 93       	st	X, r24
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <main>:
u16 Ticks = 0;
u16 Ton = 0;


void ISR_ICU();
int main() {
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62

	LCD_voidInit();
    1286:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <LCD_voidInit>
	TIMER0_voidInit();  //PWM ---- pre-scaler 8
    128a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <TIMER0_voidInit>

	Timer1_voidInit();	//Normal mode --- pre-scaler 8
    128e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <Timer1_voidInit>
	INT0_Init();    //Rising edge
    1292:	0e 94 b7 09 	call	0x136e	; 0x136e <INT0_Init>
//	INT0_LatchMode(INT0_RISING_EDGE);

	NTI0_SetCallBack(ISR_ICU);
    1296:	88 e7       	ldi	r24, 0x78	; 120
    1298:	99 e0       	ldi	r25, 0x09	; 9
    129a:	0e 94 36 0a 	call	0x146c	; 0x146c <NTI0_SetCallBack>

	GIE_voidEanble();
    129e:	0e 94 23 09 	call	0x1246	; 0x1246 <GIE_voidEanble>

	while (1) {

		LCD_voidGoToXY(0,0);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidGoToXY>
		LCD_voidWriteString("Time|on = ");
    12aa:	80 e6       	ldi	r24, 0x60	; 96
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_voidWriteString>
		LCD_voidWriteNumber(Ton);
    12b2:	80 91 82 00 	lds	r24, 0x0082
    12b6:	90 91 83 00 	lds	r25, 0x0083
    12ba:	cc 01       	movw	r24, r24
    12bc:	a0 e0       	ldi	r26, 0x00	; 0
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_voidWriteNumber>
		LCD_voidGoToXY(1,0);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidGoToXY>
		LCD_voidWriteString("T|period1 = ");
    12d0:	8b e6       	ldi	r24, 0x6B	; 107
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_voidWriteString>
		LCD_voidWriteNumber(Ticks);
    12d8:	80 91 80 00 	lds	r24, 0x0080
    12dc:	90 91 81 00 	lds	r25, 0x0081
    12e0:	cc 01       	movw	r24, r24
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_voidWriteNumber>
    12ee:	d9 cf       	rjmp	.-78     	; 0x12a2 <main+0x24>

000012f0 <ISR_ICU>:

	}
}
void ISR_ICU() {
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0;
	counter++;
    12f8:	80 91 84 00 	lds	r24, 0x0084
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	80 93 84 00 	sts	0x0084, r24

	if (counter == 1) {
    1302:	80 91 84 00 	lds	r24, 0x0084
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	19 f4       	brne	.+6      	; 0x1310 <ISR_ICU+0x20>
		//clear timer1
		Timer1_voidClear();
    130a:	0e 94 13 11 	call	0x2226	; 0x2226 <Timer1_voidClear>
    130e:	2a c0       	rjmp	.+84     	; 0x1364 <ISR_ICU+0x74>

	} else if (counter == 2) {
    1310:	80 91 84 00 	lds	r24, 0x0084
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	51 f4       	brne	.+20     	; 0x132c <ISR_ICU+0x3c>
		//Get number of ticks
		Ticks = Timer1_u16GetTimerReading();
    1318:	0e 94 3b 11 	call	0x2276	; 0x2276 <Timer1_u16GetTimerReading>
    131c:	90 93 81 00 	sts	0x0081, r25
    1320:	80 93 80 00 	sts	0x0080, r24
		//change sense mode to falling edge
		INT0_LatchMode(INT0_FALLING_EDGE);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <INT0_LatchMode>
    132a:	1c c0       	rjmp	.+56     	; 0x1364 <ISR_ICU+0x74>

	} else if (counter == 3) {
    132c:	80 91 84 00 	lds	r24, 0x0084
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	c1 f4       	brne	.+48     	; 0x1364 <ISR_ICU+0x74>
		//Get ON time
		Ton = Timer1_u16GetTimerReading();
    1334:	0e 94 3b 11 	call	0x2276	; 0x2276 <Timer1_u16GetTimerReading>
    1338:	90 93 83 00 	sts	0x0083, r25
    133c:	80 93 82 00 	sts	0x0082, r24
		Ton -= Ticks; //Subtract T|period1 - T|period2  to get ON time
    1340:	20 91 82 00 	lds	r18, 0x0082
    1344:	30 91 83 00 	lds	r19, 0x0083
    1348:	80 91 80 00 	lds	r24, 0x0080
    134c:	90 91 81 00 	lds	r25, 0x0081
    1350:	a9 01       	movw	r20, r18
    1352:	48 1b       	sub	r20, r24
    1354:	59 0b       	sbc	r21, r25
    1356:	ca 01       	movw	r24, r20
    1358:	90 93 83 00 	sts	0x0083, r25
    135c:	80 93 82 00 	sts	0x0082, r24
		INT0_Disable();
    1360:	0e 94 da 09 	call	0x13b4	; 0x13b4 <INT0_Disable>
	}

	counter = 0;
    1364:	10 92 84 00 	sts	0x0084, r1
}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <INT0_Init>:

void volatile (*INT0_pvCallBackPtr) (void) = NULL;	//call back function pointer


void INT0_Init()
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR, MCUCR_ISC01);



#elif INT0_SENSE_MODE == INT0_RISING_EDGE  // Trigger Rising Edge
	SET_BIT(MCUCR, MCUCR_ISC00);
    1376:	a5 e5       	ldi	r26, 0x55	; 85
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e5       	ldi	r30, 0x55	; 85
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	81 60       	ori	r24, 0x01	; 1
    1382:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC01);
    1384:	a5 e5       	ldi	r26, 0x55	; 85
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e5       	ldi	r30, 0x55	; 85
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	82 60       	ori	r24, 0x02	; 2
    1390:	8c 93       	st	X, r24
	CLR_BIT(MCUCR, MCUCR_ISC01);

#endif


}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <INT0_Enable>:

void INT0_Enable() {
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	// Enable NTI0 PIE
	SET_BIT(GICR, GICR_INT0);
    13a0:	ab e5       	ldi	r26, 0x5B	; 91
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	eb e5       	ldi	r30, 0x5B	; 91
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 64       	ori	r24, 0x40	; 64
    13ac:	8c 93       	st	X, r24

}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <INT0_Disable>:
void INT0_Disable() {
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	// Disable NTI0 PIE
	CLR_BIT(GICR, GICR_INT0);
    13bc:	ab e5       	ldi	r26, 0x5B	; 91
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	eb e5       	ldi	r30, 0x5B	; 91
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8f 7b       	andi	r24, 0xBF	; 191
    13c8:	8c 93       	st	X, r24
}
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <INT0_LatchMode>:
void INT0_LatchMode(u8 copy_newMode) {
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	89 83       	std	Y+1, r24	; 0x01

	if (copy_newMode == INT0_FALLING_EDGE) {
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	88 23       	and	r24, r24
    13e0:	79 f4       	brne	.+30     	; 0x1400 <INT0_LatchMode+0x30>
		SET_BIT(MCUCR, MCUCR_ISC00);
    13e2:	a5 e5       	ldi	r26, 0x55	; 85
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e5 e5       	ldi	r30, 0x55	; 85
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	81 60       	ori	r24, 0x01	; 1
    13ee:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC01);
    13f0:	a5 e5       	ldi	r26, 0x55	; 85
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e5       	ldi	r30, 0x55	; 85
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8d 7f       	andi	r24, 0xFD	; 253
    13fc:	8c 93       	st	X, r24
    13fe:	32 c0       	rjmp	.+100    	; 0x1464 <INT0_LatchMode+0x94>

	} else if (copy_newMode == INT0_RISING_EDGE) {
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	79 f4       	brne	.+30     	; 0x1424 <INT0_LatchMode+0x54>
		SET_BIT(MCUCR, MCUCR_ISC00);
    1406:	a5 e5       	ldi	r26, 0x55	; 85
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e5       	ldi	r30, 0x55	; 85
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC01);
    1414:	a5 e5       	ldi	r26, 0x55	; 85
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e5       	ldi	r30, 0x55	; 85
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	82 60       	ori	r24, 0x02	; 2
    1420:	8c 93       	st	X, r24
    1422:	20 c0       	rjmp	.+64     	; 0x1464 <INT0_LatchMode+0x94>
	} else if (copy_newMode == INT0_LOW_LEVEL_EDGE) {
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	79 f4       	brne	.+30     	; 0x1448 <INT0_LatchMode+0x78>
		CLR_BIT(MCUCR, MCUCR_ISC00);
    142a:	a5 e5       	ldi	r26, 0x55	; 85
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e5       	ldi	r30, 0x55	; 85
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8e 7f       	andi	r24, 0xFE	; 254
    1436:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC01);
    1438:	a5 e5       	ldi	r26, 0x55	; 85
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e5       	ldi	r30, 0x55	; 85
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8d 7f       	andi	r24, 0xFD	; 253
    1444:	8c 93       	st	X, r24
    1446:	0e c0       	rjmp	.+28     	; 0x1464 <INT0_LatchMode+0x94>
	} else {
		SET_BIT(MCUCR, MCUCR_ISC00);
    1448:	a5 e5       	ldi	r26, 0x55	; 85
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e5       	ldi	r30, 0x55	; 85
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC01);
    1456:	a5 e5       	ldi	r26, 0x55	; 85
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e5       	ldi	r30, 0x55	; 85
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	8c 93       	st	X, r24
	}
}
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <NTI0_SetCallBack>:

void NTI0_SetCallBack(void (*fnAddress) (void))
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <NTI0_SetCallBack+0x6>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01

	if(fnAddress != NULL)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	31 f0       	breq	.+12     	; 0x148e <NTI0_SetCallBack+0x22>
	{
		INT0_pvCallBackPtr=fnAddress;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	90 93 86 00 	sts	0x0086, r25
    148a:	80 93 85 00 	sts	0x0085, r24
	}

}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <__vector_1>:

void __vector_1(void)__attribute__((signal,used)); //attribute to avoid linker optmization
void __vector_1(void)
{
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	2f 93       	push	r18
    14a4:	3f 93       	push	r19
    14a6:	4f 93       	push	r20
    14a8:	5f 93       	push	r21
    14aa:	6f 93       	push	r22
    14ac:	7f 93       	push	r23
    14ae:	8f 93       	push	r24
    14b0:	9f 93       	push	r25
    14b2:	af 93       	push	r26
    14b4:	bf 93       	push	r27
    14b6:	ef 93       	push	r30
    14b8:	ff 93       	push	r31
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	INT0_pvCallBackPtr();
    14c2:	e0 91 85 00 	lds	r30, 0x0085
    14c6:	f0 91 86 00 	lds	r31, 0x0086
    14ca:	09 95       	icall
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <LCD_voidInit>:
#include "LCD_Interface.h"
#include "LCD_private.h"
#include "LCD_Config.h"

/***********************************************************************************/
void LCD_voidInit(void) {
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	e8 97       	sbiw	r28, 0x38	; 56
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 ef       	ldi	r26, 0xF0	; 240
    150c:	b1 e4       	ldi	r27, 0x41	; 65
    150e:	8d ab       	std	Y+53, r24	; 0x35
    1510:	9e ab       	std	Y+54, r25	; 0x36
    1512:	af ab       	std	Y+55, r26	; 0x37
    1514:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6d a9       	ldd	r22, Y+53	; 0x35
    1518:	7e a9       	ldd	r23, Y+54	; 0x36
    151a:	8f a9       	ldd	r24, Y+55	; 0x37
    151c:	98 ad       	ldd	r25, Y+56	; 0x38
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a e7       	ldi	r20, 0x7A	; 122
    1524:	55 e4       	ldi	r21, 0x45	; 69
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	89 ab       	std	Y+49, r24	; 0x31
    1530:	9a ab       	std	Y+50, r25	; 0x32
    1532:	ab ab       	std	Y+51, r26	; 0x33
    1534:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1536:	69 a9       	ldd	r22, Y+49	; 0x31
    1538:	7a a9       	ldd	r23, Y+50	; 0x32
    153a:	8b a9       	ldd	r24, Y+51	; 0x33
    153c:	9c a9       	ldd	r25, Y+52	; 0x34
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <LCD_voidInit+0x66>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	98 ab       	std	Y+48, r25	; 0x30
    1554:	8f a7       	std	Y+47, r24	; 0x2f
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1558:	69 a9       	ldd	r22, Y+49	; 0x31
    155a:	7a a9       	ldd	r23, Y+50	; 0x32
    155c:	8b a9       	ldd	r24, Y+51	; 0x33
    155e:	9c a9       	ldd	r25, Y+52	; 0x34
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6d a9       	ldd	r22, Y+53	; 0x35
    1572:	7e a9       	ldd	r23, Y+54	; 0x36
    1574:	8f a9       	ldd	r24, Y+55	; 0x37
    1576:	98 ad       	ldd	r25, Y+56	; 0x38
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	98 ab       	std	Y+48, r25	; 0x30
    1596:	8f a7       	std	Y+47, r24	; 0x2f
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <LCD_voidInit+0xc6>
    159a:	80 e9       	ldi	r24, 0x90	; 144
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	9e a7       	std	Y+46, r25	; 0x2e
    15a0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    15a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <LCD_voidInit+0xb4>
    15aa:	9e a7       	std	Y+46, r25	; 0x2e
    15ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b0:	98 a9       	ldd	r25, Y+48	; 0x30
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	98 ab       	std	Y+48, r25	; 0x30
    15b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ba:	98 a9       	ldd	r25, Y+48	; 0x30
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <LCD_voidInit+0xa8>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	69 a9       	ldd	r22, Y+49	; 0x31
    15c4:	7a a9       	ldd	r23, Y+50	; 0x32
    15c6:	8b a9       	ldd	r24, Y+51	; 0x33
    15c8:	9c a9       	ldd	r25, Y+52	; 0x34
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	98 ab       	std	Y+48, r25	; 0x30
    15d4:	8f a7       	std	Y+47, r24	; 0x2f
    15d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d8:	98 a9       	ldd	r25, Y+48	; 0x30
    15da:	9c a7       	std	Y+44, r25	; 0x2c
    15dc:	8b a7       	std	Y+43, r24	; 0x2b
    15de:	8b a5       	ldd	r24, Y+43	; 0x2b
    15e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <LCD_voidInit+0xf0>
    15e6:	9c a7       	std	Y+44, r25	; 0x2c
    15e8:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT, RS_PIN, PIN_OUTPUT);
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	63 e0       	ldi	r22, 0x03	; 3
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN, PIN_OUTPUT);
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT, D4_PIN, PIN_OUTPUT);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT, D5_PIN, PIN_OUTPUT);
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT, D6_PIN, PIN_OUTPUT);
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	62 e0       	ldi	r22, 0x02	; 2
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT, D7_PIN, PIN_OUTPUT);
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	64 e0       	ldi	r22, 0x04	; 4
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME);
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    162c:	88 e2       	ldi	r24, 0x28	; 40
    162e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_voidWriteCommand>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e0       	ldi	r26, 0x00	; 0
    1638:	b0 e4       	ldi	r27, 0x40	; 64
    163a:	8f a3       	std	Y+39, r24	; 0x27
    163c:	98 a7       	std	Y+40, r25	; 0x28
    163e:	a9 a7       	std	Y+41, r26	; 0x29
    1640:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	6f a1       	ldd	r22, Y+39	; 0x27
    1644:	78 a5       	ldd	r23, Y+40	; 0x28
    1646:	89 a5       	ldd	r24, Y+41	; 0x29
    1648:	9a a5       	ldd	r25, Y+42	; 0x2a
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a e7       	ldi	r20, 0x7A	; 122
    1650:	55 e4       	ldi	r21, 0x45	; 69
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8b a3       	std	Y+35, r24	; 0x23
    165c:	9c a3       	std	Y+36, r25	; 0x24
    165e:	ad a3       	std	Y+37, r26	; 0x25
    1660:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1662:	6b a1       	ldd	r22, Y+35	; 0x23
    1664:	7c a1       	ldd	r23, Y+36	; 0x24
    1666:	8d a1       	ldd	r24, Y+37	; 0x25
    1668:	9e a1       	ldd	r25, Y+38	; 0x26
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <LCD_voidInit+0x192>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9a a3       	std	Y+34, r25	; 0x22
    1680:	89 a3       	std	Y+33, r24	; 0x21
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <LCD_voidInit+0x210>
	else if (__tmp > 65535)
    1684:	6b a1       	ldd	r22, Y+35	; 0x23
    1686:	7c a1       	ldd	r23, Y+36	; 0x24
    1688:	8d a1       	ldd	r24, Y+37	; 0x25
    168a:	9e a1       	ldd	r25, Y+38	; 0x26
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <LCD_voidInit+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6f a1       	ldd	r22, Y+39	; 0x27
    169e:	78 a5       	ldd	r23, Y+40	; 0x28
    16a0:	89 a5       	ldd	r24, Y+41	; 0x29
    16a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9a a3       	std	Y+34, r25	; 0x22
    16c2:	89 a3       	std	Y+33, r24	; 0x21
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <LCD_voidInit+0x1f2>
    16c6:	80 e9       	ldi	r24, 0x90	; 144
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	98 a3       	std	Y+32, r25	; 0x20
    16cc:	8f 8f       	std	Y+31, r24	; 0x1f
    16ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16d0:	98 a1       	ldd	r25, Y+32	; 0x20
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_voidInit+0x1e0>
    16d6:	98 a3       	std	Y+32, r25	; 0x20
    16d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	89 a1       	ldd	r24, Y+33	; 0x21
    16dc:	9a a1       	ldd	r25, Y+34	; 0x22
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9a a3       	std	Y+34, r25	; 0x22
    16e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	89 a1       	ldd	r24, Y+33	; 0x21
    16e6:	9a a1       	ldd	r25, Y+34	; 0x22
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <LCD_voidInit+0x1d4>
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <LCD_voidInit+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	6b a1       	ldd	r22, Y+35	; 0x23
    16f0:	7c a1       	ldd	r23, Y+36	; 0x24
    16f2:	8d a1       	ldd	r24, Y+37	; 0x25
    16f4:	9e a1       	ldd	r25, Y+38	; 0x26
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9a a3       	std	Y+34, r25	; 0x22
    1700:	89 a3       	std	Y+33, r24	; 0x21
    1702:	89 a1       	ldd	r24, Y+33	; 0x21
    1704:	9a a1       	ldd	r25, Y+34	; 0x22
    1706:	9e 8f       	std	Y+30, r25	; 0x1e
    1708:	8d 8f       	std	Y+29, r24	; 0x1d
    170a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    170c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_voidInit+0x21c>
    1712:	9e 8f       	std	Y+30, r25	; 0x1e
    1714:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    1716:	8c e0       	ldi	r24, 0x0C	; 12
    1718:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_voidWriteCommand>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e4       	ldi	r27, 0x40	; 64
    1724:	89 8f       	std	Y+25, r24	; 0x19
    1726:	9a 8f       	std	Y+26, r25	; 0x1a
    1728:	ab 8f       	std	Y+27, r26	; 0x1b
    172a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172c:	69 8d       	ldd	r22, Y+25	; 0x19
    172e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1730:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1732:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a e7       	ldi	r20, 0x7A	; 122
    173a:	55 e4       	ldi	r21, 0x45	; 69
    173c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8d 8b       	std	Y+21, r24	; 0x15
    1746:	9e 8b       	std	Y+22, r25	; 0x16
    1748:	af 8b       	std	Y+23, r26	; 0x17
    174a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    174c:	6d 89       	ldd	r22, Y+21	; 0x15
    174e:	7e 89       	ldd	r23, Y+22	; 0x16
    1750:	8f 89       	ldd	r24, Y+23	; 0x17
    1752:	98 8d       	ldd	r25, Y+24	; 0x18
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1760:	88 23       	and	r24, r24
    1762:	2c f4       	brge	.+10     	; 0x176e <LCD_voidInit+0x27c>
		__ticks = 1;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9c 8b       	std	Y+20, r25	; 0x14
    176a:	8b 8b       	std	Y+19, r24	; 0x13
    176c:	3f c0       	rjmp	.+126    	; 0x17ec <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    176e:	6d 89       	ldd	r22, Y+21	; 0x15
    1770:	7e 89       	ldd	r23, Y+22	; 0x16
    1772:	8f 89       	ldd	r24, Y+23	; 0x17
    1774:	98 8d       	ldd	r25, Y+24	; 0x18
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1782:	18 16       	cp	r1, r24
    1784:	4c f5       	brge	.+82     	; 0x17d8 <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	69 8d       	ldd	r22, Y+25	; 0x19
    1788:	7a 8d       	ldd	r23, Y+26	; 0x1a
    178a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    178c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	8b 8b       	std	Y+19, r24	; 0x13
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <LCD_voidInit+0x2dc>
    17b0:	80 e9       	ldi	r24, 0x90	; 144
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	9a 8b       	std	Y+18, r25	; 0x12
    17b6:	89 8b       	std	Y+17, r24	; 0x11
    17b8:	89 89       	ldd	r24, Y+17	; 0x11
    17ba:	9a 89       	ldd	r25, Y+18	; 0x12
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <LCD_voidInit+0x2ca>
    17c0:	9a 8b       	std	Y+18, r25	; 0x12
    17c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c4:	8b 89       	ldd	r24, Y+19	; 0x13
    17c6:	9c 89       	ldd	r25, Y+20	; 0x14
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	9c 8b       	std	Y+20, r25	; 0x14
    17cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ce:	8b 89       	ldd	r24, Y+19	; 0x13
    17d0:	9c 89       	ldd	r25, Y+20	; 0x14
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	69 f7       	brne	.-38     	; 0x17b0 <LCD_voidInit+0x2be>
    17d6:	14 c0       	rjmp	.+40     	; 0x1800 <LCD_voidInit+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d8:	6d 89       	ldd	r22, Y+21	; 0x15
    17da:	7e 89       	ldd	r23, Y+22	; 0x16
    17dc:	8f 89       	ldd	r24, Y+23	; 0x17
    17de:	98 8d       	ldd	r25, Y+24	; 0x18
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9c 8b       	std	Y+20, r25	; 0x14
    17ea:	8b 8b       	std	Y+19, r24	; 0x13
    17ec:	8b 89       	ldd	r24, Y+19	; 0x13
    17ee:	9c 89       	ldd	r25, Y+20	; 0x14
    17f0:	98 8b       	std	Y+16, r25	; 0x10
    17f2:	8f 87       	std	Y+15, r24	; 0x0f
    17f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f6:	98 89       	ldd	r25, Y+16	; 0x10
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_voidInit+0x306>
    17fc:	98 8b       	std	Y+16, r25	; 0x10
    17fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_voidWriteCommand>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e4       	ldi	r27, 0x40	; 64
    180e:	8b 87       	std	Y+11, r24	; 0x0b
    1810:	9c 87       	std	Y+12, r25	; 0x0c
    1812:	ad 87       	std	Y+13, r26	; 0x0d
    1814:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1816:	6b 85       	ldd	r22, Y+11	; 0x0b
    1818:	7c 85       	ldd	r23, Y+12	; 0x0c
    181a:	8d 85       	ldd	r24, Y+13	; 0x0d
    181c:	9e 85       	ldd	r25, Y+14	; 0x0e
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	4a e7       	ldi	r20, 0x7A	; 122
    1824:	55 e4       	ldi	r21, 0x45	; 69
    1826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	8f 83       	std	Y+7, r24	; 0x07
    1830:	98 87       	std	Y+8, r25	; 0x08
    1832:	a9 87       	std	Y+9, r26	; 0x09
    1834:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1836:	6f 81       	ldd	r22, Y+7	; 0x07
    1838:	78 85       	ldd	r23, Y+8	; 0x08
    183a:	89 85       	ldd	r24, Y+9	; 0x09
    183c:	9a 85       	ldd	r25, Y+10	; 0x0a
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	2c f4       	brge	.+10     	; 0x1858 <LCD_voidInit+0x366>
		__ticks = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
    1856:	3f c0       	rjmp	.+126    	; 0x18d6 <LCD_voidInit+0x3e4>
	else if (__tmp > 65535)
    1858:	6f 81       	ldd	r22, Y+7	; 0x07
    185a:	78 85       	ldd	r23, Y+8	; 0x08
    185c:	89 85       	ldd	r24, Y+9	; 0x09
    185e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186c:	18 16       	cp	r1, r24
    186e:	4c f5       	brge	.+82     	; 0x18c2 <LCD_voidInit+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1870:	6b 85       	ldd	r22, Y+11	; 0x0b
    1872:	7c 85       	ldd	r23, Y+12	; 0x0c
    1874:	8d 85       	ldd	r24, Y+13	; 0x0d
    1876:	9e 85       	ldd	r25, Y+14	; 0x0e
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e2       	ldi	r20, 0x20	; 32
    187e:	51 e4       	ldi	r21, 0x41	; 65
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	bc 01       	movw	r22, r24
    188a:	cd 01       	movw	r24, r26
    188c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <LCD_voidInit+0x3c6>
    189a:	80 e9       	ldi	r24, 0x90	; 144
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	9c 83       	std	Y+4, r25	; 0x04
    18a0:	8b 83       	std	Y+3, r24	; 0x03
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <LCD_voidInit+0x3b4>
    18aa:	9c 83       	std	Y+4, r25	; 0x04
    18ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	69 f7       	brne	.-38     	; 0x189a <LCD_voidInit+0x3a8>
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <LCD_voidInit+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9e 83       	std	Y+6, r25	; 0x06
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	8d 81       	ldd	r24, Y+5	; 0x05
    18d8:	9e 81       	ldd	r25, Y+6	; 0x06
    18da:	9a 83       	std	Y+2, r25	; 0x02
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <LCD_voidInit+0x3f0>
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    18ea:	e8 96       	adiw	r28, 0x38	; 56
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <LCD_voidWriteBitsToSend>:
/***********************************************************************************/
void LCD_voidWriteBitsToSend(u8 copy_u8Byte) {
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	e9 97       	sbiw	r28, 0x39	; 57
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	89 af       	std	Y+57, r24	; 0x39
	//DIO_voidSetPinValue(RW_PORT,RW_PIN, PIN_LOW);
	DIO_voidSetPinValue(EN_PORT, EN_PIN, PIN_LOW);
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	62 e0       	ldi	r22, 0x02	; 2
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>

	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT, D7_PIN, (copy_u8Byte >> 7) & 1);
    191c:	89 ad       	ldd	r24, Y+57	; 0x39
    191e:	98 2f       	mov	r25, r24
    1920:	99 1f       	adc	r25, r25
    1922:	99 27       	eor	r25, r25
    1924:	99 1f       	adc	r25, r25
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	64 e0       	ldi	r22, 0x04	; 4
    192a:	49 2f       	mov	r20, r25
    192c:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT, D6_PIN, (copy_u8Byte >> 6) & 1);
    1930:	89 ad       	ldd	r24, Y+57	; 0x39
    1932:	82 95       	swap	r24
    1934:	86 95       	lsr	r24
    1936:	86 95       	lsr	r24
    1938:	83 70       	andi	r24, 0x03	; 3
    193a:	98 2f       	mov	r25, r24
    193c:	91 70       	andi	r25, 0x01	; 1
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	62 e0       	ldi	r22, 0x02	; 2
    1942:	49 2f       	mov	r20, r25
    1944:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT, D5_PIN, (copy_u8Byte >> 5) & 1);
    1948:	89 ad       	ldd	r24, Y+57	; 0x39
    194a:	82 95       	swap	r24
    194c:	86 95       	lsr	r24
    194e:	87 70       	andi	r24, 0x07	; 7
    1950:	98 2f       	mov	r25, r24
    1952:	91 70       	andi	r25, 0x01	; 1
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	61 e0       	ldi	r22, 0x01	; 1
    1958:	49 2f       	mov	r20, r25
    195a:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT, D4_PIN, (copy_u8Byte >> 4) & 1);
    195e:	89 ad       	ldd	r24, Y+57	; 0x39
    1960:	82 95       	swap	r24
    1962:	8f 70       	andi	r24, 0x0F	; 15
    1964:	98 2f       	mov	r25, r24
    1966:	91 70       	andi	r25, 0x01	; 1
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	49 2f       	mov	r20, r25
    196e:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 1m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT, EN_PIN, PIN_HIGH);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e8       	ldi	r26, 0x80	; 128
    1982:	bf e3       	ldi	r27, 0x3F	; 63
    1984:	8d ab       	std	Y+53, r24	; 0x35
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	af ab       	std	Y+55, r26	; 0x37
    198a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a e7       	ldi	r20, 0x7A	; 122
    199a:	55 e4       	ldi	r21, 0x45	; 69
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_voidWriteBitsToSend+0xd2>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_voidWriteBitsToSend+0x150>
	else if (__tmp > 65535)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_voidWriteBitsToSend+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_voidWriteBitsToSend+0x132>
    1a10:	80 e9       	ldi	r24, 0x90	; 144
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
    1a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_voidWriteBitsToSend+0x120>
    1a20:	9e a7       	std	Y+46, r25	; 0x2e
    1a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_voidWriteBitsToSend+0x114>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_voidWriteBitsToSend+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_voidWriteBitsToSend+0x15c>
    1a5c:	9c a7       	std	Y+44, r25	; 0x2c
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT, EN_PIN, PIN_LOW);
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	62 e0       	ldi	r22, 0x02	; 2
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a0 ef       	ldi	r26, 0xF0	; 240
    1a70:	b1 e4       	ldi	r27, 0x41	; 65
    1a72:	8f a3       	std	Y+39, r24	; 0x27
    1a74:	98 a7       	std	Y+40, r25	; 0x28
    1a76:	a9 a7       	std	Y+41, r26	; 0x29
    1a78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4a e7       	ldi	r20, 0x7A	; 122
    1a88:	55 e4       	ldi	r21, 0x45	; 69
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	8b a3       	std	Y+35, r24	; 0x23
    1a94:	9c a3       	std	Y+36, r25	; 0x24
    1a96:	ad a3       	std	Y+37, r26	; 0x25
    1a98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aae:	88 23       	and	r24, r24
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <LCD_voidWriteBitsToSend+0x1c0>
		__ticks = 1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9a a3       	std	Y+34, r25	; 0x22
    1ab8:	89 a3       	std	Y+33, r24	; 0x21
    1aba:	3f c0       	rjmp	.+126    	; 0x1b3a <LCD_voidWriteBitsToSend+0x23e>
	else if (__tmp > 65535)
    1abc:	6b a1       	ldd	r22, Y+35	; 0x23
    1abe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	4c f5       	brge	.+82     	; 0x1b26 <LCD_voidWriteBitsToSend+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad8:	89 a5       	ldd	r24, Y+41	; 0x29
    1ada:	9a a5       	ldd	r25, Y+42	; 0x2a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e2       	ldi	r20, 0x20	; 32
    1ae2:	51 e4       	ldi	r21, 0x41	; 65
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9a a3       	std	Y+34, r25	; 0x22
    1afa:	89 a3       	std	Y+33, r24	; 0x21
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <LCD_voidWriteBitsToSend+0x220>
    1afe:	80 e9       	ldi	r24, 0x90	; 144
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	98 a3       	std	Y+32, r25	; 0x20
    1b04:	8f 8f       	std	Y+31, r24	; 0x1f
    1b06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b08:	98 a1       	ldd	r25, Y+32	; 0x20
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_voidWriteBitsToSend+0x20e>
    1b0e:	98 a3       	std	Y+32, r25	; 0x20
    1b10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b12:	89 a1       	ldd	r24, Y+33	; 0x21
    1b14:	9a a1       	ldd	r25, Y+34	; 0x22
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	9a a3       	std	Y+34, r25	; 0x22
    1b1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	69 f7       	brne	.-38     	; 0x1afe <LCD_voidWriteBitsToSend+0x202>
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <LCD_voidWriteBitsToSend+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b26:	6b a1       	ldd	r22, Y+35	; 0x23
    1b28:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	9a a3       	std	Y+34, r25	; 0x22
    1b38:	89 a3       	std	Y+33, r24	; 0x21
    1b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b40:	8d 8f       	std	Y+29, r24	; 0x1d
    1b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_voidWriteBitsToSend+0x24a>
    1b4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);

	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT, D7_PIN, (copy_u8Byte >> 3) & 1);
    1b4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b50:	86 95       	lsr	r24
    1b52:	86 95       	lsr	r24
    1b54:	86 95       	lsr	r24
    1b56:	98 2f       	mov	r25, r24
    1b58:	91 70       	andi	r25, 0x01	; 1
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	64 e0       	ldi	r22, 0x04	; 4
    1b5e:	49 2f       	mov	r20, r25
    1b60:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT, D6_PIN, (copy_u8Byte >> 2) & 1);
    1b64:	89 ad       	ldd	r24, Y+57	; 0x39
    1b66:	86 95       	lsr	r24
    1b68:	86 95       	lsr	r24
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	91 70       	andi	r25, 0x01	; 1
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	49 2f       	mov	r20, r25
    1b74:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT, D5_PIN, (copy_u8Byte >> 1) & 1);
    1b78:	89 ad       	ldd	r24, Y+57	; 0x39
    1b7a:	86 95       	lsr	r24
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	91 70       	andi	r25, 0x01	; 1
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	49 2f       	mov	r20, r25
    1b86:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT, D4_PIN, (copy_u8Byte >> 0) & 1);
    1b8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b8c:	98 2f       	mov	r25, r24
    1b8e:	91 70       	andi	r25, 0x01	; 1
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	49 2f       	mov	r20, r25
    1b96:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 1m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT, EN_PIN, PIN_HIGH);
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	62 e0       	ldi	r22, 0x02	; 2
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e8       	ldi	r26, 0x80	; 128
    1baa:	bf e3       	ldi	r27, 0x3F	; 63
    1bac:	89 8f       	std	Y+25, r24	; 0x19
    1bae:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb0:	ab 8f       	std	Y+27, r26	; 0x1b
    1bb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a e7       	ldi	r20, 0x7A	; 122
    1bc2:	55 e4       	ldi	r21, 0x45	; 69
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8d 8b       	std	Y+21, r24	; 0x15
    1bce:	9e 8b       	std	Y+22, r25	; 0x16
    1bd0:	af 8b       	std	Y+23, r26	; 0x17
    1bd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bda:	98 8d       	ldd	r25, Y+24	; 0x18
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <LCD_voidWriteBitsToSend+0x2fa>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9c 8b       	std	Y+20, r25	; 0x14
    1bf2:	8b 8b       	std	Y+19, r24	; 0x13
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <LCD_voidWriteBitsToSend+0x378>
	else if (__tmp > 65535)
    1bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <LCD_voidWriteBitsToSend+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9c 8b       	std	Y+20, r25	; 0x14
    1c34:	8b 8b       	std	Y+19, r24	; 0x13
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_voidWriteBitsToSend+0x35a>
    1c38:	80 e9       	ldi	r24, 0x90	; 144
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	9a 8b       	std	Y+18, r25	; 0x12
    1c3e:	89 8b       	std	Y+17, r24	; 0x11
    1c40:	89 89       	ldd	r24, Y+17	; 0x11
    1c42:	9a 89       	ldd	r25, Y+18	; 0x12
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_voidWriteBitsToSend+0x348>
    1c48:	9a 8b       	std	Y+18, r25	; 0x12
    1c4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9c 8b       	std	Y+20, r25	; 0x14
    1c54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <LCD_voidWriteBitsToSend+0x33c>
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <LCD_voidWriteBitsToSend+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6d 89       	ldd	r22, Y+21	; 0x15
    1c62:	7e 89       	ldd	r23, Y+22	; 0x16
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
    1c74:	8b 89       	ldd	r24, Y+19	; 0x13
    1c76:	9c 89       	ldd	r25, Y+20	; 0x14
    1c78:	98 8b       	std	Y+16, r25	; 0x10
    1c7a:	8f 87       	std	Y+15, r24	; 0x0f
    1c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7e:	98 89       	ldd	r25, Y+16	; 0x10
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_voidWriteBitsToSend+0x384>
    1c84:	98 8b       	std	Y+16, r25	; 0x10
    1c86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(EN_PORT, EN_PIN, PIN_LOW);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	62 e0       	ldi	r22, 0x02	; 2
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e7       	ldi	r26, 0x70	; 112
    1c98:	b1 e4       	ldi	r27, 0x41	; 65
    1c9a:	8b 87       	std	Y+11, r24	; 0x0b
    1c9c:	9c 87       	std	Y+12, r25	; 0x0c
    1c9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a e7       	ldi	r20, 0x7A	; 122
    1cb0:	55 e4       	ldi	r21, 0x45	; 69
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8f 83       	std	Y+7, r24	; 0x07
    1cbc:	98 87       	std	Y+8, r25	; 0x08
    1cbe:	a9 87       	std	Y+9, r26	; 0x09
    1cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc4:	78 85       	ldd	r23, Y+8	; 0x08
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <LCD_voidWriteBitsToSend+0x3e8>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <LCD_voidWriteBitsToSend+0x466>
	else if (__tmp > 65535)
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <LCD_voidWriteBitsToSend+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <LCD_voidWriteBitsToSend+0x448>
    1d26:	80 e9       	ldi	r24, 0x90	; 144
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_voidWriteBitsToSend+0x436>
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <LCD_voidWriteBitsToSend+0x42a>
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <LCD_voidWriteBitsToSend+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_voidWriteBitsToSend+0x472>
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

}
    1d76:	e9 96       	adiw	r28, 0x39	; 57
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <LCD_voidWriteData>:

/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data) {
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	0f 92       	push	r0
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT, RS_PIN, PIN_HIGH);
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	63 e0       	ldi	r22, 0x03	; 3
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_voidWriteBitsToSend>
}
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <LCD_voidWriteCommand>:

/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command) {
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	0f 92       	push	r0
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT, RS_PIN, PIN_LOW);
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	63 e0       	ldi	r22, 0x03	; 3
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8Command);
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_voidWriteBitsToSend>
}
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <LCD_voidWriteString>:

/***********************************************************************************/

void LCD_voidWriteString(u8 const *copy_str) {
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <LCD_voidWriteString+0x6>
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <LCD_voidWriteString+0x8>
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <LCD_voidWriteString+0xa>
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
	u32 i = 0;
    1de2:	19 82       	std	Y+1, r1	; 0x01
    1de4:	1a 82       	std	Y+2, r1	; 0x02
    1de6:	1b 82       	std	Y+3, r1	; 0x03
    1de8:	1c 82       	std	Y+4, r1	; 0x04
    1dea:	15 c0       	rjmp	.+42     	; 0x1e16 <LCD_voidWriteString+0x46>
	while (copy_str[i] != '\0') {
		LCD_voidWriteData(copy_str[i]);
    1dec:	29 81       	ldd	r18, Y+1	; 0x01
    1dee:	3a 81       	ldd	r19, Y+2	; 0x02
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	fc 01       	movw	r30, r24
    1df6:	e2 0f       	add	r30, r18
    1df8:	f3 1f       	adc	r31, r19
    1dfa:	80 81       	ld	r24, Z
    1dfc:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidWriteData>
		i++;
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	ab 81       	ldd	r26, Y+3	; 0x03
    1e06:	bc 81       	ldd	r27, Y+4	; 0x04
    1e08:	01 96       	adiw	r24, 0x01	; 1
    1e0a:	a1 1d       	adc	r26, r1
    1e0c:	b1 1d       	adc	r27, r1
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	ab 83       	std	Y+3, r26	; 0x03
    1e14:	bc 83       	std	Y+4, r27	; 0x04

/***********************************************************************************/

void LCD_voidWriteString(u8 const *copy_str) {
	u32 i = 0;
	while (copy_str[i] != '\0') {
    1e16:	29 81       	ldd	r18, Y+1	; 0x01
    1e18:	3a 81       	ldd	r19, Y+2	; 0x02
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	80 81       	ld	r24, Z
    1e26:	88 23       	and	r24, r24
    1e28:	09 f7       	brne	.-62     	; 0x1dec <LCD_voidWriteString+0x1c>
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    1e2a:	26 96       	adiw	r28, 0x06	; 6
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LCD_voidGoToXY>:

/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row, u8 copy_u8col) {
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	27 97       	sbiw	r28, 0x07	; 7
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	8e 83       	std	Y+6, r24	; 0x06
    1e52:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4] = { 0x00, 0x40, 0x14, 0x54 };
    1e54:	1a 82       	std	Y+2, r1	; 0x02
    1e56:	80 e4       	ldi	r24, 0x40	; 64
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	84 e1       	ldi	r24, 0x14	; 20
    1e5c:	8c 83       	std	Y+4, r24	; 0x04
    1e5e:	84 e5       	ldi	r24, 0x54	; 84
    1e60:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address = rows_address[copy_u8row] + copy_u8col;
    1e62:	8e 81       	ldd	r24, Y+6	; 0x06
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	ce 01       	movw	r24, r28
    1e6a:	02 96       	adiw	r24, 0x02	; 2
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e2 0f       	add	r30, r18
    1e70:	f3 1f       	adc	r31, r19
    1e72:	90 81       	ld	r25, Z
    1e74:	8f 81       	ldd	r24, Y+7	; 0x07
    1e76:	89 0f       	add	r24, r25
    1e78:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address + SET_DDRAM_ADDRESS);
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	80 58       	subi	r24, 0x80	; 128
    1e7e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_voidWriteCommand>

}
    1e82:	27 96       	adiw	r28, 0x07	; 7
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <LCD_voidClear>:

/***********************************************************************************/
void LCD_voidClear() {
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_voidWriteCommand>
}
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <LCD_voidWriteSpecialCharToCGRAM>:
 }
 */
/***********************************************************************************/
/* pass special character and block number */
void LCD_voidWriteSpecialCharToCGRAM(u8 * copy_u8data , u8 copy_u8ByteNum , u8 row,u8 col)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	28 97       	sbiw	r28, 0x08	; 8
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	9d 83       	std	Y+5, r25	; 0x05
    1ebe:	8c 83       	std	Y+4, r24	; 0x04
    1ec0:	6e 83       	std	Y+6, r22	; 0x06
    1ec2:	4f 83       	std	Y+7, r20	; 0x07
    1ec4:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8PatternCounter;
	u8 max_char = 8;
    1ec6:	88 e0       	ldi	r24, 0x08	; 8
    1ec8:	8a 83       	std	Y+2, r24	; 0x02

/* 1- Calculate the required CGRAM_ADDRESS */
	u8 Local_u8bolckAddress = copy_u8ByteNum * 8;
    1eca:	8e 81       	ldd	r24, Y+6	; 0x06
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	89 83       	std	Y+1, r24	; 0x01
/* 2- Set the address to CGRAM */
	LCD_voidWriteCommand(Local_u8bolckAddress + SET_CGRAM_ADDRESS);
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	80 5c       	subi	r24, 0xC0	; 192
    1ee2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_voidWriteCommand>
/* 3- loop over the pattern  */
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < max_char; ++Local_u8PatternCounter)
    1ee6:	1b 82       	std	Y+3, r1	; 0x03
    1ee8:	0e c0       	rjmp	.+28     	; 0x1f06 <LCD_voidWriteSpecialCharToCGRAM+0x5e>
	{
		 LCD_voidWriteData(copy_u8data[Local_u8PatternCounter]);
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e2 0f       	add	r30, r18
    1ef8:	f3 1f       	adc	r31, r19
    1efa:	80 81       	ld	r24, Z
    1efc:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidWriteData>
/* 1- Calculate the required CGRAM_ADDRESS */
	u8 Local_u8bolckAddress = copy_u8ByteNum * 8;
/* 2- Set the address to CGRAM */
	LCD_voidWriteCommand(Local_u8bolckAddress + SET_CGRAM_ADDRESS);
/* 3- loop over the pattern  */
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < max_char; ++Local_u8PatternCounter)
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	8f 5f       	subi	r24, 0xFF	; 255
    1f04:	8b 83       	std	Y+3, r24	; 0x03
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	98 17       	cp	r25, r24
    1f0c:	70 f3       	brcs	.-36     	; 0x1eea <LCD_voidWriteSpecialCharToCGRAM+0x42>
	{
		 LCD_voidWriteData(copy_u8data[Local_u8PatternCounter]);
	}
	//LCD_voidWriteData(copy_u8ByteNum);
	LCD_voidGoToXY(row,col);
    1f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f10:	68 85       	ldd	r22, Y+8	; 0x08
    1f12:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidGoToXY>
	LCD_voidWriteData(copy_u8ByteNum);
    1f16:	8e 81       	ldd	r24, Y+6	; 0x06
    1f18:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidWriteData>
}
    1f1c:	28 96       	adiw	r28, 0x08	; 8
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <LCD_voidWriteNumber>:
void LCD_voidWriteNumber( u32 Copy_u8num )

{
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	63 97       	sbiw	r28, 0x13	; 19
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	68 8b       	std	Y+16, r22	; 0x10
    1f48:	79 8b       	std	Y+17, r23	; 0x11
    1f4a:	8a 8b       	std	Y+18, r24	; 0x12
    1f4c:	9b 8b       	std	Y+19, r25	; 0x13

	u32 LOCAL_NUMBER=Copy_u8num ;
    1f4e:	88 89       	ldd	r24, Y+16	; 0x10
    1f50:	99 89       	ldd	r25, Y+17	; 0x11
    1f52:	aa 89       	ldd	r26, Y+18	; 0x12
    1f54:	bb 89       	ldd	r27, Y+19	; 0x13
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	9b 83       	std	Y+3, r25	; 0x03
    1f5a:	ac 83       	std	Y+4, r26	; 0x04
    1f5c:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10] ,i=0 ;
    1f5e:	19 82       	std	Y+1, r1	; 0x01

	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+48 );
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	08 2f       	mov	r16, r24
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	ac 81       	ldd	r26, Y+4	; 0x04
    1f6c:	bd 81       	ldd	r27, Y+5	; 0x05
    1f6e:	2a e0       	ldi	r18, 0x0A	; 10
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodsi4>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	28 2f       	mov	r18, r24
    1f84:	20 5d       	subi	r18, 0xD0	; 208
    1f86:	ce 01       	movw	r24, r28
    1f88:	06 96       	adiw	r24, 0x06	; 6
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	e0 0f       	add	r30, r16
    1f8e:	f1 1f       	adc	r31, r17
    1f90:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	ac 81       	ldd	r26, Y+4	; 0x04
    1f98:	bd 81       	ldd	r27, Y+5	; 0x05
    1f9a:	2a e0       	ldi	r18, 0x0A	; 10
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodsi4>
    1faa:	da 01       	movw	r26, r20
    1fac:	c9 01       	movw	r24, r18
    1fae:	8a 83       	std	Y+2, r24	; 0x02
    1fb0:	9b 83       	std	Y+3, r25	; 0x03
    1fb2:	ac 83       	std	Y+4, r26	; 0x04
    1fb4:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=0);
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	ac 81       	ldd	r26, Y+4	; 0x04
    1fc2:	bd 81       	ldd	r27, Y+5	; 0x05
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	a1 05       	cpc	r26, r1
    1fc8:	b1 05       	cpc	r27, r1
    1fca:	51 f6       	brne	.-108    	; 0x1f60 <LCD_voidWriteNumber+0x32>
    1fcc:	11 c0       	rjmp	.+34     	; 0x1ff0 <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-1]);
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9c 01       	movw	r18, r24
    1fd6:	21 50       	subi	r18, 0x01	; 1
    1fd8:	30 40       	sbci	r19, 0x00	; 0
    1fda:	ce 01       	movw	r24, r28
    1fdc:	06 96       	adiw	r24, 0x06	; 6
    1fde:	fc 01       	movw	r30, r24
    1fe0:	e2 0f       	add	r30, r18
    1fe2:	f3 1f       	adc	r31, r19
    1fe4:	80 81       	ld	r24, Z
    1fe6:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=0);


	for(;i>0;i--)
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	81 50       	subi	r24, 0x01	; 1
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	88 23       	and	r24, r24
    1ff4:	61 f7       	brne	.-40     	; 0x1fce <LCD_voidWriteNumber+0xa0>
	{
		LCD_voidWriteData(LOCAL_ARR[i-1]);
	}

}
    1ff6:	63 96       	adiw	r28, 0x13	; 19
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <LCD_voidCharPos>:
void LCD_voidCharPos(u8 copy_u8Byte,u8 copy_u8row ,u8 copy_u8col)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <LCD_voidCharPos+0x6>
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	6a 83       	std	Y+2, r22	; 0x02
    201c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidGoToXY(copy_u8row,copy_u8row);
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	6a 81       	ldd	r22, Y+2	; 0x02
    2022:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidGoToXY>
	LCD_voidWriteBitsToSend(copy_u8Byte);
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_voidWriteBitsToSend>
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <LCD_voidStringPos>:
void LCD_voidStringPos(u8 const * copy_str,u8 copy_u8row ,u8 copy_u8col)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <LCD_voidStringPos+0x6>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <LCD_voidStringPos+0x8>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	6b 83       	std	Y+3, r22	; 0x03
    204a:	4c 83       	std	Y+4, r20	; 0x04
	LCD_voidWriteString(copy_str);
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_voidWriteString>
	LCD_voidGoToXY(copy_u8row, copy_u8col);
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	6c 81       	ldd	r22, Y+4	; 0x04
    2058:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidGoToXY>

}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <LCD_voidNumPos>:
void LCD_voidNumPos(u8 copy_u8Byte,u8 copy_u8row ,u8 copy_u8col)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <LCD_voidNumPos+0x6>
    2070:	0f 92       	push	r0
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	6a 83       	std	Y+2, r22	; 0x02
    207a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidGoToXY(copy_u8row,copy_u8row);
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	6a 81       	ldd	r22, Y+2	; 0x02
    2080:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidGoToXY>
	LCD_voidWriteNumber(copy_u8Byte);
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a0 e0       	ldi	r26, 0x00	; 0
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_voidWriteNumber>
}
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <TIMER0_voidInit>:



void (*TIMER0_pvCallBackFunc)(void) = NULL;	//call back function pointer

void TIMER0_voidInit(){
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_MODE_SELECTION == CTC_MODE
CLR_BIT(TCCR0,TCCR0_WGM00);
SET_BIT(TCCR0,TCCR0_WGM01);

#elif TIMER0_MODE_SELECTION == FAST_PWM_MODE
SET_BIT(TCCR0,TCCR0_WGM00);
    20aa:	a3 e5       	ldi	r26, 0x53	; 83
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e3 e5       	ldi	r30, 0x53	; 83
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 64       	ori	r24, 0x40	; 64
    20b6:	8c 93       	st	X, r24
SET_BIT(TCCR0,TCCR0_WGM01);
    20b8:	a3 e5       	ldi	r26, 0x53	; 83
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e3 e5       	ldi	r30, 0x53	; 83
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	88 60       	ori	r24, 0x08	; 8
    20c4:	8c 93       	st	X, r24
CLR_BIT(TCCR0,TCCR0_COM01);
#elif FAST_PWM_Mode_SELECTION == INVERTING_MODE
SET_BIT(TCCR0,TCCR0_COM00);
SET_BIT(TCCR0,TCCR0_COM01);
#elif FAST_PWM_Mode_SELECTION == NON_INVERTING_MODE
CLR_BIT(TCCR0,TCCR0_COM00);
    20c6:	a3 e5       	ldi	r26, 0x53	; 83
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e3 e5       	ldi	r30, 0x53	; 83
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 7e       	andi	r24, 0xEF	; 239
    20d2:	8c 93       	st	X, r24
SET_BIT(TCCR0,TCCR0_COM01);
    20d4:	a3 e5       	ldi	r26, 0x53	; 83
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e3 e5       	ldi	r30, 0x53	; 83
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 62       	ori	r24, 0x20	; 32
    20e0:	8c 93       	st	X, r24
#endif


/*Prescaler : division by 8*/
CLR_BIT(TCCR0,TCCR0_CS00);
    20e2:	a3 e5       	ldi	r26, 0x53	; 83
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e3 e5       	ldi	r30, 0x53	; 83
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	8e 7f       	andi	r24, 0xFE	; 254
    20ee:	8c 93       	st	X, r24
SET_BIT(TCCR0,TCCR0_CS01);
    20f0:	a3 e5       	ldi	r26, 0x53	; 83
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e3 e5       	ldi	r30, 0x53	; 83
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	82 60       	ori	r24, 0x02	; 2
    20fc:	8c 93       	st	X, r24
CLR_BIT(TCCR0,TCCR0_CS02);
    20fe:	a3 e5       	ldi	r26, 0x53	; 83
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e3 e5       	ldi	r30, 0x53	; 83
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8b 7f       	andi	r24, 0xFB	; 251
    210a:	8c 93       	st	X, r24

/*Compare match value for duty cycle = 25%*/
OCR0=64;
    210c:	ec e5       	ldi	r30, 0x5C	; 92
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 e4       	ldi	r24, 0x40	; 64
    2112:	80 83       	st	Z, r24
TCCR0 |= Copy_u8ClockSelect;

*/


}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <TIMER0_voidEnable>:



void TIMER0_voidEnable(){
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62



#endif

}
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <TIMER0_voidDisable>:
void TIMER0_voidDisable()
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_CS00);
    2130:	a3 e5       	ldi	r26, 0x53	; 83
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e3 e5       	ldi	r30, 0x53	; 83
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8e 7f       	andi	r24, 0xFE	; 254
    213c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    213e:	a3 e5       	ldi	r26, 0x53	; 83
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e3 e5       	ldi	r30, 0x53	; 83
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8d 7f       	andi	r24, 0xFD	; 253
    214a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    214c:	a3 e5       	ldi	r26, 0x53	; 83
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e3 e5       	ldi	r30, 0x53	; 83
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8b 7f       	andi	r24, 0xFB	; 251
    2158:	8c 93       	st	X, r24
}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <TIMER0_voidSetCallBack>:
void TIMER0_voidSetCallBack(void (*fnAddress) (void) )
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	00 d0       	rcall	.+0      	; 0x2166 <TIMER0_voidSetCallBack+0x6>
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != fnAddress)
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	31 f0       	breq	.+12     	; 0x2182 <TIMER0_voidSetCallBack+0x22>
	{

		TIMER0_pvCallBackFunc=fnAddress;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	90 93 88 00 	sts	0x0088, r25
    217e:	80 93 87 00 	sts	0x0087, r24
     }
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <__vector_11>:



void __vector_11()   __attribute__((signal)); //attribute to avoid linker optmization
void __vector_11()
{
    218c:	1f 92       	push	r1
    218e:	0f 92       	push	r0
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	0f 92       	push	r0
    2194:	11 24       	eor	r1, r1
    2196:	2f 93       	push	r18
    2198:	3f 93       	push	r19
    219a:	4f 93       	push	r20
    219c:	5f 93       	push	r21
    219e:	6f 93       	push	r22
    21a0:	7f 93       	push	r23
    21a2:	8f 93       	push	r24
    21a4:	9f 93       	push	r25
    21a6:	af 93       	push	r26
    21a8:	bf 93       	push	r27
    21aa:	ef 93       	push	r30
    21ac:	ff 93       	push	r31
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62

	TIMER0_pvCallBackFunc();
    21b6:	e0 91 87 00 	lds	r30, 0x0087
    21ba:	f0 91 88 00 	lds	r31, 0x0088
    21be:	09 95       	icall
}
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	ff 91       	pop	r31
    21c6:	ef 91       	pop	r30
    21c8:	bf 91       	pop	r27
    21ca:	af 91       	pop	r26
    21cc:	9f 91       	pop	r25
    21ce:	8f 91       	pop	r24
    21d0:	7f 91       	pop	r23
    21d2:	6f 91       	pop	r22
    21d4:	5f 91       	pop	r21
    21d6:	4f 91       	pop	r20
    21d8:	3f 91       	pop	r19
    21da:	2f 91       	pop	r18
    21dc:	0f 90       	pop	r0
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	0f 90       	pop	r0
    21e2:	1f 90       	pop	r1
    21e4:	18 95       	reti

000021e6 <Timer1_voidInit>:
#include "Timer1_interface.h"

 //void (*ICU_pvCallBackPtr)(void)=NULL;

void Timer1_voidInit(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
	//Normal mode
	/*Set prescaler to divide by 8*/

		CLR_BIT(TCCR1B,TCCR1B_CS10);
    21ee:	ad e4       	ldi	r26, 0x4D	; 77
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	ed e4       	ldi	r30, 0x4D	; 77
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	8e 7f       	andi	r24, 0xFE	; 254
    21fa:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    21fc:	ad e4       	ldi	r26, 0x4D	; 77
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	ed e4       	ldi	r30, 0x4D	; 77
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	82 60       	ori	r24, 0x02	; 2
    2208:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    220a:	ad e4       	ldi	r26, 0x4D	; 77
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ed e4       	ldi	r30, 0x4D	; 77
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	8b 7f       	andi	r24, 0xFB	; 251
    2216:	8c 93       	st	X, r24

	/*Set ICR1 to required top value of 20000 for servo*/
//	ICR1=20000;

	/* Initial Value for Timer1 */
		TCNT1 = 0;
    2218:	ee e4       	ldi	r30, 0x4E	; 78
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	11 82       	std	Z+1, r1	; 0x01
    221e:	10 82       	st	Z, r1


}
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <Timer1_voidClear>:
void Timer1_voidClear()
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 =0;
    222e:	ee e4       	ldi	r30, 0x4E	; 78
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	11 82       	std	Z+1, r1	; 0x01
    2234:	10 82       	st	Z, r1
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <Timer1_voidSetCompChA>:
void Timer1_voidSetCompChA(u16 Copy_u16Value)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <Timer1_voidSetCompChA+0x6>
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16Value;
    224a:	eb e4       	ldi	r30, 0x4B	; 75
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	9a 81       	ldd	r25, Y+2	; 0x02
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <Timer1_u16GetInputCaptureReading>:
u16 Timer1_u16GetInputCaptureReading(void)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    2268:	e6 e4       	ldi	r30, 0x46	; 70
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <Timer1_u16GetTimerReading>:
u16  Timer1_u16GetTimerReading()
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    227e:	ee e4       	ldi	r30, 0x4E	; 78
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <__udivmodsi4>:
    228c:	a1 e2       	ldi	r26, 0x21	; 33
    228e:	1a 2e       	mov	r1, r26
    2290:	aa 1b       	sub	r26, r26
    2292:	bb 1b       	sub	r27, r27
    2294:	fd 01       	movw	r30, r26
    2296:	0d c0       	rjmp	.+26     	; 0x22b2 <__udivmodsi4_ep>

00002298 <__udivmodsi4_loop>:
    2298:	aa 1f       	adc	r26, r26
    229a:	bb 1f       	adc	r27, r27
    229c:	ee 1f       	adc	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	a2 17       	cp	r26, r18
    22a2:	b3 07       	cpc	r27, r19
    22a4:	e4 07       	cpc	r30, r20
    22a6:	f5 07       	cpc	r31, r21
    22a8:	20 f0       	brcs	.+8      	; 0x22b2 <__udivmodsi4_ep>
    22aa:	a2 1b       	sub	r26, r18
    22ac:	b3 0b       	sbc	r27, r19
    22ae:	e4 0b       	sbc	r30, r20
    22b0:	f5 0b       	sbc	r31, r21

000022b2 <__udivmodsi4_ep>:
    22b2:	66 1f       	adc	r22, r22
    22b4:	77 1f       	adc	r23, r23
    22b6:	88 1f       	adc	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	1a 94       	dec	r1
    22bc:	69 f7       	brne	.-38     	; 0x2298 <__udivmodsi4_loop>
    22be:	60 95       	com	r22
    22c0:	70 95       	com	r23
    22c2:	80 95       	com	r24
    22c4:	90 95       	com	r25
    22c6:	9b 01       	movw	r18, r22
    22c8:	ac 01       	movw	r20, r24
    22ca:	bd 01       	movw	r22, r26
    22cc:	cf 01       	movw	r24, r30
    22ce:	08 95       	ret

000022d0 <__prologue_saves__>:
    22d0:	2f 92       	push	r2
    22d2:	3f 92       	push	r3
    22d4:	4f 92       	push	r4
    22d6:	5f 92       	push	r5
    22d8:	6f 92       	push	r6
    22da:	7f 92       	push	r7
    22dc:	8f 92       	push	r8
    22de:	9f 92       	push	r9
    22e0:	af 92       	push	r10
    22e2:	bf 92       	push	r11
    22e4:	cf 92       	push	r12
    22e6:	df 92       	push	r13
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	ca 1b       	sub	r28, r26
    22fa:	db 0b       	sbc	r29, r27
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	09 94       	ijmp

00002308 <__epilogue_restores__>:
    2308:	2a 88       	ldd	r2, Y+18	; 0x12
    230a:	39 88       	ldd	r3, Y+17	; 0x11
    230c:	48 88       	ldd	r4, Y+16	; 0x10
    230e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2310:	6e 84       	ldd	r6, Y+14	; 0x0e
    2312:	7d 84       	ldd	r7, Y+13	; 0x0d
    2314:	8c 84       	ldd	r8, Y+12	; 0x0c
    2316:	9b 84       	ldd	r9, Y+11	; 0x0b
    2318:	aa 84       	ldd	r10, Y+10	; 0x0a
    231a:	b9 84       	ldd	r11, Y+9	; 0x09
    231c:	c8 84       	ldd	r12, Y+8	; 0x08
    231e:	df 80       	ldd	r13, Y+7	; 0x07
    2320:	ee 80       	ldd	r14, Y+6	; 0x06
    2322:	fd 80       	ldd	r15, Y+5	; 0x05
    2324:	0c 81       	ldd	r16, Y+4	; 0x04
    2326:	1b 81       	ldd	r17, Y+3	; 0x03
    2328:	aa 81       	ldd	r26, Y+2	; 0x02
    232a:	b9 81       	ldd	r27, Y+1	; 0x01
    232c:	ce 0f       	add	r28, r30
    232e:	d1 1d       	adc	r29, r1
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	ed 01       	movw	r28, r26
    233c:	08 95       	ret

0000233e <_exit>:
    233e:	f8 94       	cli

00002340 <__stop_program>:
    2340:	ff cf       	rjmp	.-2      	; 0x2340 <__stop_program>
